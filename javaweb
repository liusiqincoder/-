2018.9.3  入门知识
脚本元素  注释功能
jsp+JavaBean模式
   jsp出来页面
   JavaBean处理数据
jsp+JavaBean+Servlet模式

JSP语法
JSP页面：静态部分（css和html）
        动态部分    注释<!--注释--> 或<%--注释--%>
                   指令<%@-----%>
                      page指令 语法<%@ page 属性名1="属性值" 属性名2="属性值" .....%>
                           page指令属性有language，extends,import,pageEncoding,contentType,session,
                           buffer,autoFlush,isErrorPage,errorPage,isThreadSafe,isELIgnored,include
                   脚本<%java代码%>
                   表达式<%=java表达式%>
                   声明<%!声明一个Java类或者方法%>
                   动作<jsp:动作名>开始，</jsp:动作名>结束
                       <jsp:useBean>html代码和Java代码相分离，创建一个javaBean实例
                           语法：<jsp:useBean id="name" scope="page|request|session|application"
                                    class="page.class" beanName="beanName"/>(创建类为page.class的名为name的类实例)
                       <jsp：setProperty name="beanName" property="propertyName" value="value">
                             为name实例的propertyName赋值value(同样有<jsp：getProperty....>)
响应模式  客户端发送HTTP请求，服务器发送HTTP响应
jsp内置对象（9个）   request 接受客户端发送来的请求信息（只包含HTTP报文的头部数据）
                           表单提交方式：post（携带数据,数据量大，安全性高）和get（相反)
                        主要方法：getParameter(),getParameter(String name),setAttribute(Key,value)....
                   response 向客户端发送数据
                        主要方法：encodeRedirectURL(String URL),encodeURL(url).....
                                 sendRedirect(String Location)使用之前不能有信息输出
                                      两个页面不属于同一个request,URL地址栏会改变,forward相反
                        PrintWriter输出总是提前于内置的out对象
                   设置字符编码优先级：setCharacterEncoding,setContentType,默认ISO-8859-1
                   out对象  JspWriter类的实例  
                         方法：println(),clear(),flush(),clearBuffer(),getBufferSize()...
                   session  客户端与服务器的一次会话，是时间概念，指用户使用浏览的这段时间
                             HttpSession类的实例
                          方法：getCreationTime(),getId()....
                          生命周期：1.会话中打开的超链接都属于同一个会话
                                   2.只要当前会话没有关闭，重新打开浏览器窗口访问统一资源项目时属于同一次会话
                                   3.将本次会话的所有界面关闭，再访问才属于不同会话
                                   （旧会话还存在服务器，等到超时）
                          销毁：1.调用session.invalidate()
                               2.session过期
                               3.服务器重启
                    application  （servletContext实例）实现用户间的数据共享，可存放全局变量。开始于服务器启动，终止与服务器关闭
                          方法：setAttribute(name,value),getServerInfo()
                    page 保存当前页面信息
                    pageContext 可以访问本页面的所有对象
                          方法：getOut(),getPage()...setAttribute(name,attribute),include(url),forward(url)
                    config servlet初始化时jsp向他传递信息的一个对象，包括servlet初始化需要的信息和服务器信息
                          方法：个体Servlet Context(),getInitParameter(name),....
                    Exception 页面运行异常时产生，必须把isErrorPage设置为true,才能应用
                          方法：getMessage(),toString()...
setHeader(name,value),可以设置响应头(Refresh,刷新间隔)

Cookie 由服务器写到客户端的小文件或字符串
      方法:Cookie(name,value),getName(),getMaxAge(int)
      服务器设置Cookie到客户端response.addCookie(Cookie)
URL重写    浏览器不支持或用户禁用Cookie,客户发送的请求将不包含Cookie中的sessionID
          此时，客户程序将会在URL尾部添加额外数据标志当前会话
Header (request方法)包含请求的附加信息和客户端信息 Enumeration request.getHeaderName() 

JavaBean技术    提高代码的重用性
       不可视JavaBean：值JavaBean（封装表单数据）和工具Javabean(封装业务逻辑)
       可视Javabean
       规范：1.实现可序列化接口  2.公共无参构造方法  3.类的声明是非final类
       使用<jsp:useBean>创建JavaBean  语法：
             <jsp:useBean id="beanName" class="classPath" sope="page|Request|Session|Application"/>
 
 EL表达式   语法格式：${expression}
       在jsp网页中必须以"/${"开头，或"${'${'}"
   特点：（1）EL语法简单，方便
（2）EL可以与JSTL结合使用，也可以和JavaScript语句结合使用。
（3）EL可以自动转换类型。
（4）EL既可以访问一般的变量，也可以访问JavaBean中的属性和嵌套属性、集合对象。
（5）EL中可以执行算术运算、逻辑运算、关系运算和条件运算等。
（6）EL中可以获得命名空间（PageContext对象，他是页面中所有其他内置对象的最大范围的集成对象，通过它可以访问其他内置对象）。
（7）EL中在进行除法运算时，如果除数是0，则返回无穷大Infinity，而不返回错误。
（8）EL中可以访问JSP的作用域（request、session、application以及page）
（9）扩展函数可以与Java类的静态方法进行映射。
     禁用EL
        1.使用'\'  即\$｛expression}   
        2.使用page  ,<%@ page isELIgnored="true">
        3.在web.xml配置<el-ignored>
  变量存取范围  page(默认) request  session  application
        eg.  ${pageScope.usenme｝
  访问数据  1.${user[user-name]}
           2.访问数组    ${arrUser[0]}
           3.list集合读取 ${sessionScope.citys[0]}
           3.map集合读取  ${applicationScope.citys[0]}
  算术、关系、逻辑运算符，条件运算符   同java
  empty运算符 判断对象或变量是否为空  ${not empty session.username}
  隐含对象  pgeContext,param,header,cookie,pageScope
  
  
  
