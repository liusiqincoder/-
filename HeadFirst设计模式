重构
    列出需要改变代码的原因
    把问题归零，找出应用中需要变化的代码，把他们独立出来，不要和不需要改变的代码混在一起（设计原则）
    针对接口编程，而不是为了实现编程
    多用组合，少用继承（有一个>是一个）
策略模式
    定义了算法族，分别分装起来，让他们可以相互替换，此模式让算法的实现独立于使用算法的用户
    
观察者模式
    定义了对象的一对多的依赖，当一个对象状态改变时，他的所有观察者都会收到通知并更新
    为了交互对象松耦合设计而努力
    java内置的观察者模式  继承Observable（是一个类，而非接口，实现有许多问题）
装饰者模式 （动态地将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案）
    类应该对扩展开放，对修改关闭
    目标是允许类容易扩展，在不修改原有的代码情况下，就可搭配新的行为。
    装饰者和被装饰者有相同的超类型
    可以用一个或多个对象包装一个对象装饰者可以在所委托被装饰者的行为之前或之后，加上自己的行为，已达到特定的目的
    缺点：常常造成设计中有大量的小类
工厂方法
    定义了一个创建对象的接口，但由子类决定要实例化的类是哪个，工厂化的方法让类的实例化推迟到子类
    要依赖抽象，不要依赖具体类
抽象工厂方法
    提供一个接口，用于创建相关依赖对象的家族，而不需要明确指明具体类
    工厂方法是创建具体对象，但抽象工厂方法则是对象的组合（组合多个interface）
单例模式（Singleton）
    确保变量只被实例化一次，并提供一个全局访问点，而且只有用到时才实例化
    但多线程时会出现错误，必须给getInstance()加个双重检查锁
命令模式  将请求封装成对象，以便使用不同的请求、队列或者日志来参数化其他对象。命令模式也支持可撤销的操作
