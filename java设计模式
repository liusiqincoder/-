接口型模型
    接口的优点：限制了对象之间的交互，带来很大的自由
适配器模式   将一个类的接口转换成客户希望的另一个接口。适配器模式让那些接口不兼容的类可以一起工作
  对象适配器：使用委托方式，不创建子类（适配方式没有在接口中指定时）
  类适配器：通过创建子类并实现接口来实现适配  (适配方式在接口中指定时）
  优点： 1、可以让任何两个没有关联的类一起运行。 2、提高了类的复用。 3、增加了类的透明度。 4、灵活性好。
  缺点： 1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 
          B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，
            而是直接对系统进行重构。 2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。 
            
 简单工厂方法：这个模式本身很简单而且使用在业务较简单的情况下
     工厂类角色（负责生产逻辑的类）
     抽象产品角色：它一般是具体产品继承的父类或者实现的接口。由接口或者抽象类来实现。
     具体产品角色：工厂类所创建的对象就是此角色的实例。。
 抽象工厂方法
      抽象工厂角色： 这是工厂方法模式的核心，它与应用程序无关。是具体工厂角色必须实现的接口或者必须继承的父类。在java中它由抽象类或者接口来实现。
      具体工厂角色：它含有和具体业务逻辑有关的代码。由应用程序调用以创建对应的具体产品的对象。在java中它由具体的类来实现。
      抽象产品角色：它是具体产品继承的父类或者是实现的接口。在java中一般有抽象类或者接口来实现。
      具体产品角色：具体工厂角色所创建的对象就是此角色的实例。在java中由具体的类来实现。
      
 外观类模式
     使用少量代码提供一个典型的、在类库中没有虚饰用法的类
